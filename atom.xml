<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人小站</title>
  
  
  <link href="/liuooo.github.io/atom.xml" rel="self"/>
  
  <link href="https://bbbigcat.github.io/liuooo.github.io/"/>
  <updated>2019-09-06T06:32:39.317Z</updated>
  <id>https://bbbigcat.github.io/liuooo.github.io/</id>
  
  <author>
    <name>bin.liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>并发异步获取多个数据</title>
    <link href="https://bbbigcat.github.io/liuooo.github.io/2019/09/06/async-get-data/"/>
    <id>https://bbbigcat.github.io/liuooo.github.io/2019/09/06/async-get-data/</id>
    <published>2019-09-06T06:30:01.618Z</published>
    <updated>2019-09-06T06:32:39.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并发异步获取多个数据"><a href="#并发异步获取多个数据" class="headerlink" title="并发异步获取多个数据"></a>并发异步获取多个数据</h2><blockquote><p><strong>场景</strong>：在有些时候，我们需要并发异步获取多个数据（如爬虫时并行请求多个接口），并且在获取到数据之后，对这些数据一起进行利用，这里从最原始的场景介绍几种方法。</p></blockquote><blockquote><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><blockquote><p>在 promise 没有出现之前，我们首先想到的还是解决异步问题的老大哥，最基础的方法，就是回调函数（等结果出来后再执行的函数），当一个请求数据结束后，返回一个回调函数，在里面对下一个接口进行调用获取数据。</p></blockquote></blockquote><p><code>为了简单这里使用一些 jq 的代码</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>('http://data_source_1', function(data1) &#123;</span><br><span class="line">  $.<span class="keyword">get</span>('http://data_source_2', function(data2) &#123;</span><br><span class="line">    $.<span class="keyword">get</span>('http://data_source_3', function(data3) &#123;</span><br><span class="line">        <span class="keyword">let</span> html = <span class="built_in">Object</span>.assign(&#123;&#125;, data1, data2, data3); </span><br><span class="line">        render(html);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这种方法先获取 data1，获取完成后再去获取 data2， 然后获取 data3，以此类推，可以进行多层嵌套获取，然后对所有数据进行处理，这种方法也可以解决请求接口相互依赖的情况，可以在回调函数中进行操作后再进行下一次请求。这种方式固然方便，但是嵌套回调会出现一个被很多人诟病的问题，回调地狱（这里暂且不表）。</p><p>可以注意到这里的几个请求之间并没有什么依赖关系，所以下面就介绍一种不使用回调的思路，计数器。</p><blockquote><h4 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h4><blockquote><p>这里首先要明确下，这个方法有一个很大的局限性，需要知道一共请求了几个接口，且接口简互不关联，而且不能知道异步操作执行的顺序。思路就是自己维护一个计数器，先定义一个 <code>let count = 0</code>，每次请求成功后就 <code>count++</code>，最后判断 <code>count</code> 值是不是等于需要请求的接口数。当值为 <code>true</code> 时，对所有数据进行操作。</p></blockquote></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  cosnt result = &#123;&#125;;</span><br><span class="line">  $.<span class="keyword">get</span>('http://data_source_1', function(data) &#123;</span><br><span class="line">    result.data1 = data;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;);</span><br><span class="line">  $.<span class="keyword">get</span>('http://data_source_2', function(data) &#123;</span><br><span class="line">    result.data2 = data;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;);</span><br><span class="line">  $.<span class="keyword">get</span>('http://data_source_3', function(data) &#123;</span><br><span class="line">    result.data3 = data;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> html = <span class="built_in">Object</span>.assign(&#123;&#125;, data1, data2, data3); </span><br><span class="line">      render(html);</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><blockquote><p>在有 ES6 后，Promise 以更好的异步解决方案替代了大部分回调函数的场景，这里先使用 Promise 封装一个简单的异步请求方法</p></blockquote></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getJson = <span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(<span class="keyword">this</span>.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">      xhr.open(<span class="string">'GET'</span>, url);</span><br><span class="line">      xhr.onreadystatechange = handler;</span><br><span class="line">      xhr.responsrType = <span class="string">'json'</span>;</span><br><span class="line">      xhr.setRequestHeader(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>);</span><br><span class="line">      xhr.send();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后进行操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getJson(<span class="string">'http://data_source_1'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">data1</span> =&gt;</span> </span><br><span class="line">  getJson(<span class="string">'http://data_source_2'</span>)</span><br><span class="line">  ).then(<span class="function"><span class="params">data2</span> =&gt;</span> </span><br><span class="line">    getJson(<span class="string">'http://data_source_3'</span>)</span><br><span class="line">    ).then(<span class="function"><span class="params">data3</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> html = <span class="built_in">Object</span>.assign(&#123;&#125;, data1, data2, data3)</span><br><span class="line">      render(html);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>额，感觉也没有好到哪里，换种方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urlList = [<span class="string">'http://data_source_1'</span>, <span class="string">'http://data_source_2'</span>, <span class="string">'http://data_source_3'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promises = urlList.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getJson(item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Promise.all</code> 方法接受一个数组作为参数，且都是 <code>Promise</code> 实例，当数组里的实例都变成 <code>fulfilled</code>(已完成) ,<code>p</code> 的状态才能变成 <code>fulfilled</code><br><code>注意：当数组中的实例中有自己的 catch 方法时，出错时不会触发 p 中的 catch 方法，该实例还会返回一个 Promise 实例，也会变成 resolved，进而调用 p  的 then 方法指定的回调函数</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;并发异步获取多个数据&quot;&gt;&lt;a href=&quot;#并发异步获取多个数据&quot; class=&quot;headerlink&quot; title=&quot;并发异步获取多个数据&quot;&gt;&lt;/a&gt;并发异步获取多个数据&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：在有些时候
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JSON.stringify() 的第二第三个参数</title>
    <link href="https://bbbigcat.github.io/liuooo.github.io/2019/09/06/about-JSON-stringify/"/>
    <id>https://bbbigcat.github.io/liuooo.github.io/2019/09/06/about-JSON-stringify/</id>
    <published>2019-09-06T06:30:01.550Z</published>
    <updated>2019-09-06T06:32:46.998Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JSON-stringify-的第二第三个参数"><a href="#JSON-stringify-的第二第三个参数" class="headerlink" title="JSON.stringify() 的第二第三个参数"></a>JSON.stringify() 的第二第三个参数</h4><blockquote><p>场景：在使用 node 写命令行脚本的时候，修改文件内容后会出现改变原有格式的情况，这里使用到了 JSON.parse 和 JSON.stringify 的方法</p></blockquote><p><code>JSON.parse</code> 方法主要作用是把 json 字符串解析成 js 值或对象<br><code>JSON.stringify</code> 方法主要作用是把 js 值或对象转换成 json 字符串</p><blockquote><p>操作顺序</p><ol><li>先读取文件内容后使用 <code>JSON.parse</code> 将内容转换成可以操作的类型</li><li>处理后再用 <code>JSON.stringify</code> 向文件中写入内容</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(configFilePath, <span class="string">'utf8'</span>, (err, file) =&gt; &#123; <span class="comment">// configFilePath 文件路径，注意使用 `utf8` 格式</span></span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="keyword">let</span> list = <span class="built_in">JSON</span>.parse(file);</span><br><span class="line">        <span class="comment">// 对转换后的内容进行处理</span></span><br><span class="line">        fs.writeFile(configFilePath, <span class="built_in">JSON</span>.stringify(list, <span class="literal">null</span>, <span class="number">4</span>), <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err)</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>这里主要介绍下 <code>JSON.stringify</code> 方法</p><blockquote><p>语法：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(value[, replacer [, space]])</span><br></pre></td></tr></table></figure><blockquote><p><strong>参数</strong></p><ol><li><strong>value</strong>：将要序列化成 一个 json 字符串的值</li><li><strong>replace</strong>：(可选)<br>函数：被序列化的每个属性都经过该函数的转换和处理<br>数组：只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中<br>null或未提供：对象的所有属性都会被序列化</li><li><strong>space</strong>：指定缩进使用的空白字符串，用于美化输出<br>如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；<br>如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；<br>如果该参数没有提供（或者为null）将没有空格</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;JSON-stringify-的第二第三个参数&quot;&gt;&lt;a href=&quot;#JSON-stringify-的第二第三个参数&quot; class=&quot;headerlink&quot; title=&quot;JSON.stringify() 的第二第三个参数&quot;&gt;&lt;/a&gt;JSON.stringify(
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>js 模块引用的相关介绍(export, exports, import等)</title>
    <link href="https://bbbigcat.github.io/liuooo.github.io/2019/09/06/export-import/"/>
    <id>https://bbbigcat.github.io/liuooo.github.io/2019/09/06/export-import/</id>
    <published>2019-09-06T01:47:44.739Z</published>
    <updated>2019-09-06T06:32:42.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="export-export-default-exports-module-expoerts的区别"><a href="#export-export-default-exports-module-expoerts的区别" class="headerlink" title="export, export default, exports, module expoerts的区别"></a>export, export default, exports, module expoerts的区别</h2><p><strong>export, export default</strong></p><p>1、这两个是属于 es6 的模块规范，可用于导出常量，函数，文件，模块等，导入使用 import（也可以是 require）<br>2、在一个文件和模块中，export 可以有多个，但是 export default 只能有一个<br>3、通过 export 导出时，在导入时要加入 {}， export default 则不需要<br>4、输出单个值用 export default，多个值用 export<br>5、两个不能一起用</p><p><strong>exports, module.exports</strong><br>1、这两个是 node 的语法，属于 CommonJS 模块规范，导入需要 require<br>2、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var exports = module.exports = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>Node 应用由模块构成，node 为每一个模块提供一个 exports 变量，指向 module.exports<br>3、可以在 exports 对象上添加方法，表示对外输出的接口，如同在 module.exports 上添加一样<br>4、不能直接将 exports 变量指向一个值，会切断与 module.exports 之间的联系</p><h2 id="直接在-h5-页面中使用-import-的问题"><a href="#直接在-h5-页面中使用-import-的问题" class="headerlink" title="直接在 h5 页面中使用 import 的问题"></a>直接在 h5 页面中使用 import 的问题</h2><blockquote><p>在 h5 页面中使用 import 时，会一直报错 <code>Unexpected identifier</code> 这种错误指的是书写不规范的原因</p></blockquote><p><strong>解决办法</strong>：</p><ol><li>在 h5 页面的中的 script 标签设置 : <code>&lt;script type=&#39;module&#39;&gt;</code>, 然后开服务器</li><li>使用 beble 编译成 es5</li></ol><h2 id="commonjs-的扩展学习"><a href="#commonjs-的扩展学习" class="headerlink" title="commonjs 的扩展学习"></a>commonjs 的扩展学习</h2><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023027697415616" target="_blank" rel="noopener">廖雪峰 JavaScript 教程</a></p><blockquote><p>模块：在 node 环境中，一个 .js 文件就称为一个模块(module)，使用模块大大提高了代码的可维护性，也避免了函数名和变量名的冲突，相同名字的函数和变量完全可以存在不同模块中。</p></blockquote><blockquote><p>模块的加载机制被称为 CommonJS 规范。</p><ul><li>在这个规范下，每一个 .js 都是一个模块，他们内部各自使用的变量名和函数名都不冲突。</li><li>一个模块想要对外暴露变量(函数也是变量)，可以用 module.export = veriable，一个模块想要引用其他模块暴露的变量，用 var ref = require(‘module_name’)，就拿到了引用模块的变量</li></ul></blockquote><h5 id="深入了解模块原理"><a href="#深入了解模块原理" class="headerlink" title="深入了解模块原理"></a>深入了解模块原理</h5><blockquote><p>JavaScript 语言本身并没有一种模块机制来保证不同模块可以使用相同的变量(全局变量)名。</p></blockquote><p><strong>node.js 是如何实现的？</strong></p><blockquote><p>实现<code>模块</code>的功能，并不需要语法层面的支持。Node.js 也并不会增加任何 JavaScript 语法，实现<code>模块</code>的主要奥妙就在于 JavaScript 是一直函数式变成语言，支持闭包。如果把一段 JavaScript 用函数包装起来，这段代码的所有<code>全局</code>变量就变成了函数的内部变量。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编写 hello.js</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'world'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s + <span class="string">''</span> + name + <span class="string">'!'</span>);</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">&gt; Node.js 加载了 hello.js 后，它可以把代码包装一下，就变成了这样执行</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="string">'hello'</span>;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'world'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(s + <span class="string">''</span> + name + <span class="string">'!'</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>这样一来，原来的全局变量 s 现在变成了匿名函数内部的局部变量。如果 Node.js 继续加载其他模块，这些模块中定义的“全局”变量 s 也互干扰了。</p><blockquote><p>模块的输出 <code>module.exports</code> 怎么实现<br>准备一个对象 <code>module</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备 module 对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  id: <span class="string">'hello'</span>,</span><br><span class="line">  exports: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> load = <span class="function"><span class="keyword">function</span> (<span class="params">module</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 读取的 hello.js 代码</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello, '</span> + name + <span class="string">'!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">module</span>.exports = great;</span><br><span class="line">  <span class="comment">// hello.js 代码结束</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;；</span><br><span class="line"><span class="keyword">var</span> exported = load(<span class="built_in">module</span>);</span><br><span class="line"><span class="comment">// 保存 module</span></span><br><span class="line">save(<span class="built_in">module</span>, exported);</span><br></pre></td></tr></table></figure><p>可见，变量 <code>module</code> 是 Node 在加载 js 文件前准备的一个变量，并将其传入加载函数，我们在 hello.js 中可以直接使用变量 <code>module</code> 的原因就在于它实际上是函数的一个参数：</p><p><code>module.exports = greet</code></p><p>通过把参数 <code>module</code> 传递给 <code>load()</code> 函数，hello.js 就顺利的把一个变量传递给了 Node 环境，Node 会把 <code>module</code> 变量保存到某个地方。</p><p>由于 Node 保存了所有导入的 module ，当我们用 require() 获取 module 时，Node 找到对用的 module，把这个 module 的 exports 变量返回，这样，另一个模块就顺利的拿到了模块的输出。</p><blockquote><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>如果要输出一个键值对象 {}， 可以利用 exports 这个已存在的空对象 {}，并继续在上面添加新的键值。<br>如果要输出一个函数或数组，必须直接对 module.exports 对象赋值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如以下情况</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'foo'</span>; &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello, world!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello, '</span> + name + <span class="string">'!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello, world!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 exports</span></span><br><span class="line">exports.hello = hello;</span><br><span class="line">exports.greet = greet;</span><br><span class="line"><span class="comment">// 使用 module.exports</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    hello: hello,</span><br><span class="line">    greet: greet</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;export-export-default-exports-module-expoerts的区别&quot;&gt;&lt;a href=&quot;#export-export-default-exports-module-expoerts的区别&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>yarn 和 npm</title>
    <link href="https://bbbigcat.github.io/liuooo.github.io/2019/09/06/yarn-npm/"/>
    <id>https://bbbigcat.github.io/liuooo.github.io/2019/09/06/yarn-npm/</id>
    <published>2019-09-06T01:44:37.918Z</published>
    <updated>2019-09-06T06:32:45.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yarn-和-npm"><a href="#yarn-和-npm" class="headerlink" title="yarn 和 npm"></a>yarn 和 npm</h1><blockquote><p><strong>yarn publish 和 npm publish 遇到的问题</strong></p></blockquote><p><code>可以在本地用 yarn pack 和 npm pack 模拟</code></p><p>npm pack / publish 的时候，不仅会读取根目录 package.json 文件里的 files （打包/发布那些文件）属性，还会读取其他文件夹里 package.json 里的这个属性</p><p>yarn pack / publish 的时候，只读取根目录</p><blockquote><p><strong>npm 指令简写</strong></p></blockquote><blockquote><p><strong>npm install xx –save / npm install xx -S</strong> 安装到 dependencies 中，生产环境<br><strong>npm install xx –save-dev / npm install xx -D</strong> 安装到 devDependencies 中，开发环境</p></blockquote><blockquote><p><strong>npm i</strong> 安装 package.json 中的依赖时，两部分的包都会 pull 下来</p><blockquote><pre><code>**npm i --prod &lt;=&gt; npm i --production**  // 仅会拉取dependencies中的依赖</code></pre></blockquote></blockquote><blockquote><blockquote><p>   设置<strong>NODE_DEV=production</strong>时  // 效果同上，仅会拉取dependencies中的依赖 (注意等号两边没空格)</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;yarn-和-npm&quot;&gt;&lt;a href=&quot;#yarn-和-npm&quot; class=&quot;headerlink&quot; title=&quot;yarn 和 npm&quot;&gt;&lt;/a&gt;yarn 和 npm&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;yarn publish 和 np
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
